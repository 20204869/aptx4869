package com.zyl.java.designpatterns.abstractfactorypattern;

/**
 * @author 4869
 * 抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
 * 应用场景：
 * 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节
 * 系统中有多于一个的产品族，而每次只使用其中某一产品族
 * 属于同一个产品族的产品将在一起使用
 * 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现
 *
 * 抽象工厂模式包含如下角色：
 * AbstractFactory(抽象工厂)：用于声明生成抽象产品的方法
 * ConcreteFactory(具体工厂)：实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；
 * AbstractProduct(抽象产品)：为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；
 * Product(具体产品)：定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。
 *
 */
public class AbstractFactory {
}
